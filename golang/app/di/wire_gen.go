// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package di

import (
	"app/api/create-instance/infra/data"
	"app/api/create-instance/infra/web"
	"app/api/create-instance/usecase"
	data4 "app/api/delete-instance/infra/data"
	web4 "app/api/delete-instance/infra/web"
	usecase4 "app/api/delete-instance/usecase"
	data2 "app/api/start-instance/infra/data"
	web2 "app/api/start-instance/infra/web"
	usecase2 "app/api/start-instance/usecase"
	data3 "app/api/stop-instance/infra/data"
	web3 "app/api/stop-instance/infra/web"
	usecase3 "app/api/stop-instance/usecase"
	data5 "app/api/upload-key/infra/data"
	web5 "app/api/upload-key/infra/web"
	usecase5 "app/api/upload-key/usecase"
	"app/environment/waf"
	"github.com/labstack/echo/v4"
	"gorm.io/gorm"
)

// Injectors from wire.go:

func InitializeHandler(d *gorm.DB, e *echo.Echo) waf.Handler {
	serviceRepository := data.NewServiceRepository(d)
	service := usecase.NewService(serviceRepository)
	handler := web.NewHandler(service)
	repositoryServiceRepository := data2.NewServiceRepository(d)
	usecaseService := usecase2.NewService(repositoryServiceRepository)
	webHandler := web2.NewHandler(usecaseService)
	serviceRepository2 := data3.NewServiceRepository(d)
	service2 := usecase3.NewService(serviceRepository2)
	handler2 := web3.NewHandler(service2)
	serviceRepository3 := data4.NewServiceRepository(d)
	service3 := usecase4.NewService(serviceRepository3)
	handler3 := web4.NewHandler(service3)
	serviceRepository4 := data5.NewServiceRepository(d)
	service4 := usecase5.NewService(serviceRepository4)
	handler4 := web5.NewHandler(service4)
	wafHandler := waf.NewHandler(handler, webHandler, handler2, handler3, handler4)
	return wafHandler
}
